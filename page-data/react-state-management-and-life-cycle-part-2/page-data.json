{"componentChunkName":"component---src-templates-page-js","path":"/react-state-management-and-life-cycle-part-2","result":{"data":{"markdownRemark":{"frontmatter":{"title":"React State Management And Life Cycle - Part 2","date":"21 April 2020","path":"/react-state-management-and-life-cycle-part-2","author":"James","excerpt":"This is a part 2 of React State Management And Life Cycle series.","tags":["react"],"coverImage":null},"id":"19ddd099-4e44-54b3-9f52-b04f51df1fc7","html":"<p>This is a part 2 of React State Management And Life Cycle series. If you are interested more in:</p>\n<ul>\n<li>Initialization of state in a functional and class component</li>\n<li>Update a state in a component</li>\n<li>Functional component vs. class component</li>\n</ul>\n<p>Please check the <a href=\"/react-state-management-and-life-cycle-part-1\">Part 1</a> as well.</p>\n<hr>\n<h2>Lifting Up a State</h2>\n<ul>\n<li>Suppose that there is a parent and child component. When it is necessary to share a state between components, we often use <a href=\"https://reactjs.org/docs/lifting-state-up.html\">\"lifting up a state\"</a></li>\n</ul>\n<h3>Example</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Functional component \nimport React, {useState} from &#39;react&#39;;\n\nconst ParentComponent = () =&gt; {\n\n    let [greetings, setGreetings] = useState(&quot;Hello. How are you?&quot;);\n\n    return (\n        &lt;div&gt;\n            &lt;ChildComponent greetings={greetings} setGreetings={setGreetings} /&gt;\n        &lt;/div&gt;\n    )\n}\n\nconst ChildComponent = ({greetings, setGreetings}) =&gt; {\n\n    const changeGreetings = () =&gt; {\n        setGreetings(&quot;How can I help you today?&quot;);\n    }\n\n    return (\n        &lt;&gt;\n            &lt;h1&gt;{greetings}&lt;/h1&gt;\n            &lt;button onClick={changeGreetings}&gt;I am good. Thanks for asking.&lt;/button&gt;\n        &lt;/&gt;\n    )\n}\n\n// Class component\n\nimport React from &#39;react&#39;;\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      greetings: &quot;Hello. How are you?&quot;,\n    };\n  }\n\n  setGreetings = () =&gt; {\n    this.setState({\n      greetings: &quot;How can I help you today?&quot;,\n    });\n  };\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;ChildComponent greetings={this.state.greetings} setGreetings={this.setGreetings} /&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nclass ChildComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      &lt;&gt;\n        &lt;h1&gt;{this.props.greetings}&lt;/h1&gt;\n        &lt;button onClick={this.props.setGreetings}&gt;\n          I am good. Thanks for asking.\n        &lt;/button&gt;\n      &lt;/&gt;\n    );\n  }\n}</code></pre></div>\n<ul>\n<li>The above example shows how you can lift up a state in functional and class components.</li>\n<li>\n<p>Once a user clicks a button rendered by <code class=\"language-text\">ChildComponent</code>, <code class=\"language-text\">setGreetings</code> in <code class=\"language-text\">ParentComponent</code> is executed.</p>\n<ul>\n<li>Note that in the <code class=\"language-text\">ParentComponent</code>, <code class=\"language-text\">greetings</code> and <code class=\"language-text\">setGreetings</code> are included as attributes in the tag so that it can be called in <code class=\"language-text\">ChildComponent</code>.</li>\n<li>\n<p>Also, a name of attribute can be different from a variable name. For example, I used  <code class=\"language-text\">&lt;ChildComponent greetings={this.state.greetings} setGreetings={this.setGreetings} /&gt;</code>, but you can also say like <code class=\"language-text\">&lt;ChildComponent hello={this.state.greetings} setHello={this.setGreetings} /&gt;</code>.</p>\n<ul>\n<li>In this case, you need to use <code class=\"language-text\">hello</code> and <code class=\"language-text\">setHello</code> in the <code class=\"language-text\">ChildComponent</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>State Management between Siblings</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Class component\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: &quot;Nobody clicked a button&quot;,\n      componentType: &quot;&quot;\n    };\n  }\n\n\n  const setMessage = (componentType) =&gt; {\n    let message = (componentType === &quot;Child1&quot;) ? \n                    &quot;A button in Child1 has been pushed&quot; :\n                    &quot;A button in Child2 has been pushed&quot;\n    this.setState({ message: message, componentType: componentType });\n  };\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;{this.state.message}&lt;/h1&gt;\n        &lt;Child1Component\n          componentType={this.state.componentType}\n          setMessage={this.setMessage}\n        /&gt;\n        &lt;Child2Component\n          componentType={this.state.componentType}\n          setMessage={this.setMessage}\n        /&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nclass Child1Component extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n\n    let expression =\n      this.props.componentType === &quot;Child1&quot; ? \n      &quot;Yay I was faster&quot; : \n      (this.props.componentType === &quot;&quot;) ? &quot;I will win!&quot; : &quot;Noooo&quot;;\n\n    return (\n      &lt;&gt;\n        &lt;h3&gt;{expression}&lt;/h3&gt;\n        &lt;button onClick={() =&gt; this.props.setMessage(&quot;Child1&quot;)}&gt;\n          Child 1 button\n        &lt;/button&gt;\n      &lt;/&gt;\n    );\n  }\n}\n\nclass Child2Component extends React.Component {\n  constructor(props) {\n    super(props);\n    \n  }\n\n  render() {\n    let expression = \n      this.props.componentType === &quot;Child2&quot;\n        ? &quot;Hahaha I won&quot;\n        : (this.props.componentType === &quot;&quot;) ? &quot;Let&#39;s see&quot; : &quot;How could you do that?&quot;;\n\n    return (\n      &lt;&gt;\n        &lt;h3&gt;{expression}&lt;/h3&gt;\n        &lt;button onClick={() =&gt; this.props.setMessage(&quot;Child2&quot;)}&gt;\n          Child 2 button\n        &lt;/button&gt;\n      &lt;/&gt;\n    );\n  }\n}</code></pre></div>\n<ul>\n<li>In total, there are three components: <code class=\"language-text\">ParentComponent</code>, <code class=\"language-text\">Child1Component</code> and <code class=\"language-text\">Child2Component</code>.</li>\n<li>In <code class=\"language-text\">ParentComponent</code>, the values of states are saved, and a function that updates a value of each state is implemented as well.</li>\n<li>\n<p>Once a button in <code class=\"language-text\">Child1Component</code> or <code class=\"language-text\">Child2Component</code> pressed, <code class=\"language-text\">setMessage</code> function is called. </p>\n<ul>\n<li>Note that <code class=\"language-text\">setMessage</code> is inherited to <code class=\"language-text\">Child1Component</code> and <code class=\"language-text\">Child2Component</code> as a prop. Therefore, it is possible to call <code class=\"language-text\">setMessage</code> in the children components</li>\n<li>To check which button in which class is pressed, there is a state, <code class=\"language-text\">componentType</code>.</li>\n<li>The default is <code class=\"language-text\">&quot;&quot;</code> when it is initialized.</li>\n<li>A state of <code class=\"language-text\">componentType</code> is also inherited to the children components so that each component use its value to change what they rendered</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Functional component</code></pre></div>","excerpt":"This is a part 2 of React State Management And Life Cycle series. If you are interested more in: Initialization of state in a functional andâ€¦"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":"/react-state-management-and-life-cycle-part-1","title":"React State Management And Life Cycle - Part 1","tags":["react"]},"fileAbsolutePath":"/Users/james/Development/Git/jyoo/src/posts/2020-04-02-react-state-management-and-life-cycle-part-1.md"},"previous":{"frontmatter":{"path":"/summary-of-basic-sorting-algorithms","title":"Summary of Basic Sorting Algorithms","tags":["algorithm"]},"fileAbsolutePath":"/Users/james/Development/Git/jyoo/src/posts/2020-04-23-summary-of-basic-algorithms.md"}}}}