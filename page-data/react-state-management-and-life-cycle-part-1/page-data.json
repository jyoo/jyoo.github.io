{"componentChunkName":"component---src-templates-page-js","path":"/react-state-management-and-life-cycle-part-1","result":{"data":{"markdownRemark":{"frontmatter":{"title":"React State Management And Life Cycle - Part 1","date":"02 April 2020","path":"/react-state-management-and-life-cycle-part-1","author":"James","excerpt":"Last time, when I was taking a technical interview and working on a take-home test, I encountered an issue related to state management and lifecycle of React.","tags":["react","programming"],"coverImage":null},"id":"dd4bed1e-8ba1-579b-a78e-734246676a71","html":"<p>Last time, when I was taking a technical interview and working on a take-home test, I encountered an issue related to state management and lifecycle of React. This article is a summary of how we need to manage state in React, and life cycle in React.</p>\n<hr>\n<h2>Function and Class Components</h2>\n<ul>\n<li>In React, we make a component using a function (like a function in Javascript) or a class. For example,</li>\n</ul>\n<h3>Example</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// A function component\nfunction Hello(props) {\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;Q. How are you doing today?&lt;/h1&gt;\n            &lt;h2&gt;I am doing great :)&lt;/h2&gt;\n        &lt;/div&gt;\n    )\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// A class component\nclass Hello extends React.component {\n    render() {\n       return (\n            &lt;div&gt;\n                &lt;h1&gt;Q. How are you doing today?&lt;/h1&gt;\n                &lt;h2&gt;I am doing great :)&lt;/h2&gt;\n            &lt;/div&gt;\n        ) \n    }\n}</code></pre></div>\n<ul>\n<li>There are some differences between a function and class component, but I will dicuss more about it another article.</li>\n</ul>\n<hr>\n<h2>Function Component</h2>\n<ul>\n<li>Using a hook which is added in React 16.8, you can declare a variable for saving and updating state.</li>\n</ul>\n<h3>Example</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, {useState} from &#39;react&#39;;\n\nconst Result = (props) =&gt; {\n    const [userID, setUserID] = useState(props.id);\n\n    const handleButtonClick = () =&gt; {setUserID(&quot;&quot;)};\n\n    return (\n        &lt;div&gt;\n            &lt;h3&gt;{userID}&lt;/h3&gt;\n            &lt;button onClick={handleButtonClick}&gt;Remove ID&lt;/button&gt;\n        &lt;/div&gt;\n    )\n}</code></pre></div>\n<ul>\n<li>In the above, <code class=\"language-text\">props</code> includes user <code class=\"language-text\">id</code>, and <code class=\"language-text\">props.id</code> is assigned to <code class=\"language-text\">userID</code>.</li>\n<li><code class=\"language-text\">setUserID</code> is used to update the state of <code class=\"language-text\">userID</code>. Once a user click the button (i.e, Remove ID), <code class=\"language-text\">handleButtonClick</code> is executed, and an empty string is assigned to <code class=\"language-text\">userID</code>.</li>\n</ul>\n<hr>\n<h2>Class Component</h2>\n<h3>Example</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from &#39;react&#39;;\n\nclass Result extends React.component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userID: props.id\n        }\n    }\n    \n    const handleButtonClick = () =&gt; {this.setState({userID: &quot;&quot;})};\n\n    render() {\n        return (\n            &lt;div&gt;\n                &lt;h3&gt;{userID}&lt;/h3&gt;\n                &lt;button onClick={handleButtonClick}&gt;Remove ID&lt;/button&gt;\n            &lt;/div&gt;\n        )\n    }\n}</code></pre></div>\n<ul>\n<li>If we change the function component into the class component style, it will be looked like the above.</li>\n<li>\n<p>However, two differences must be discussed</p>\n<ul>\n<li>Instead of <code class=\"language-text\">const [userID, setUserID] = useState(props.id);</code>, <code class=\"language-text\">this.state</code> is used to store the state.</li>\n<li>In order to update the value of <code class=\"language-text\">userID</code>, <code class=\"language-text\">this.setState({userID: &quot;&quot;});</code> is used in the function, <code class=\"language-text\">handleButtonClick</code>.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>Function vs Class Components (Update)</h2>\n<ul>\n<li>\n<p>Function components use a hook to save and update a state</p>\n<ul>\n<li><a href=\"https://reactjs.org/docs/hooks-rules.html\">In fact, a hook can only be used in a function component or from custom hooks</a></li>\n<li>Class components use <code class=\"language-text\">this.state</code> and <code class=\"language-text\">this.setState({});</code> to update a state</li>\n</ul>\n</li>\n<li>\n<p>When a state is updated,</p>\n<ul>\n<li>A hook will overwrite saved value inside of a state variable. For example, let's say we wrote the following:</li>\n</ul>\n</li>\n</ul>\n<h3>Example</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```\nimport React, {useState} from &#39;react&#39;;\n\nconst Result = (props) =&gt; {\n    const [user, setUserID] = useState({\n        id: props.id,\n        name: props.name\n    });\n\n    const handleButtonClick = () =&gt; setUserID({id: &quot;&quot;});\n\n    return (\n        &lt;div&gt;\n            &lt;h3&gt;{userID}&lt;/h3&gt;\n            &lt;button onClick={handleButtonClick}&gt;Remove ID&lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\n```</code></pre></div>\n<ul>\n<li>In this case, <code class=\"language-text\">user</code> will only have <code class=\"language-text\">id</code> property, and the property with <code class=\"language-text\">name</code> key will be removed.</li>\n<li>However, <code class=\"language-text\">this.setState({})</code> in class component will only modify applicable properties.</li>\n<li>\n<p>Any data type can be assigned to a state variable in a function component</p>\n<ul>\n<li><code class=\"language-text\">this.state</code> in a class component is always an object.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>Function vs Class Components (Update using a previous value)</h2>\n<h3>Example 1</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```\n// Function component\nimport React, {useState} from &#39;react&#39;;\n\nconst Result = (props) =&gt; {\n    const [count, setCount] = useState(123);\n\n    const handleButtonClick = () =&gt; {setCount(count + 1)};\n    \n    // OR\n    // const handleButtonClick = () =&gt; {setCount(prevState =&gt; prevState + 1)}\n\n    return (\n            &lt;div&gt;\n               &lt;h3&gt;{userID}&lt;/h3&gt;\n                &lt;button onClick={incrementCount}&gt;Increment Count&lt;/button&gt;\n            &lt;/div&gt;\n    )\n}\n```\n\n```\n// Class component\nimport React from &#39;react&#39;;\n\nclass Result extends React.component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 123\n        }\n    }\n\n    const handleButtonClick = () =&gt; {this.setState({count: this.state.count + 1})};\n\n    render() {\n        return (\n            &lt;div&gt;\n                &lt;h3&gt;{userID}&lt;/h3&gt;\n                &lt;button onClick={incrementCount}&gt;Increment Count&lt;/button&gt;\n            &lt;/div&gt;\n        )\n    }\n}\n```</code></pre></div>\n<ul>\n<li>\n<p><a href=\"%22https://blog.logrocket.com/how-to-get-previous-props-state-with-react-hooks/%22\">We can also create a custom hook to update a state value in a function component.</a></p>\n<h3>Example 2</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Function component\nimport React, {useState, useRef, useEffect} from &#39;react&#39;;\n\nfunction usePrevious(val) {\n    const ref = useRef();\n\n    useEffect(() =&gt; {\n        ref.current = val;\n    })\n\n    return ref.current;\n}\n\nfunction Result(props) {\n\n    const [clickCount, setClickCount] = useState(123);\n    const prevClickCount = usePrevious(clickCount);\n\n    const handleButtonClick = () =&gt; {setClickCount(prevClickCount + 1)};\n\n    return (\n        &lt;div&gt;\n            &lt;h3&gt;{userID}&lt;/h3&gt;\n            &lt;button onClick={incrementCount}&gt;Increment Count&lt;/button&gt;\n        &lt;/div&gt;\n    )\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from &#39;react&#39;;\n\nclass Result extends React.component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 123\n        }\n    }\n\n    const handleButtonClick = () =&gt; {this.setState((prevState, props) =&gt; {\n        count: prevState.count++\n    })};\n\n    render() {\n        return (\n            &lt;div&gt;\n                &lt;h3&gt;{userID}&lt;/h3&gt;\n                &lt;button onClick={incrementCount}&gt;Increment Count&lt;/button&gt;\n            &lt;/div&gt;\n        )\n    }\n}</code></pre></div>\n</li>\n<li>The above examples are useful, but there is another use case as well. If a state has to be updated after certain seconds are passed, <a href=\"https://overreacted.io/making-setinterval-declarative-with-react-hooks/\">this website would provide the best solution!</a></li>\n<li>If you use a class component, and a state has to be updated, we can use a built-in <code class=\"language-text\">setState</code> with parameters</li>\n</ul>","excerpt":"Last time, when I was taking a technical interview and working on a take-home test, I encountered an issue related to state management and…"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":"/asynchronous-in-javascript","title":"Asynchronous in Javascript","tags":["javascript","programming"]},"fileAbsolutePath":"/Users/james/Development/Git/jyoo/src/posts/2020-03-17-asynchronous-in-javascript.md"},"previous":{"frontmatter":{"path":"/react-state-management-and-life-cycle-part-2","title":"React State Management And Life Cycle - Part 2","tags":["react","programming"]},"fileAbsolutePath":"/Users/james/Development/Git/jyoo/src/posts/2020-04-21-react-state-management-and-life-cycle-part-2.md"}}}}